name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  FLUTTER_VERSION: '3.29.0'

jobs:
  # Code Quality and Testing
  test:
    name: Test and Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Setup environment file
      run: |
        echo "ENVIRONMENT=production" > .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "FIREBASE_WEB_API_KEY=${{ secrets.FIREBASE_WEB_API_KEY }}" >> .env
        echo "FIREBASE_ANDROID_API_KEY=${{ secrets.FIREBASE_ANDROID_API_KEY }}" >> .env
        echo "FIREBASE_IOS_API_KEY=${{ secrets.FIREBASE_IOS_API_KEY }}" >> .env
        echo "ENABLE_ENCRYPTION=true" >> .env
        echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> .env
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Analyze code
      run: flutter analyze
      
    - name: Run tests
      run: flutter test --coverage
      
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        
    - name: Security scan
      run: |
        dart pub global activate pana
        pana --json > pana_report.json
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          coverage/
          pana_report.json

  # Android Build
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup environment file
      run: |
        echo "ENVIRONMENT=production" > .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "FIREBASE_ANDROID_API_KEY=${{ secrets.FIREBASE_ANDROID_API_KEY }}" >> .env
        echo "ENABLE_ENCRYPTION=true" >> .env
        echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> .env
        
    - name: Setup keystore
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/upload-keystore.jks
        echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/keystore.properties
        echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/keystore.properties
        echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/keystore.properties
        echo "storeFile=../upload-keystore.jks" >> android/keystore.properties
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Build Android APK
      run: flutter build apk --release
      
    - name: Build Android App Bundle
      run: flutter build appbundle --release
      
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        
    - name: Upload App Bundle
      uses: actions/upload-artifact@v3
      with:
        name: android-aab
        path: build/app/outputs/bundle/release/app-release.aab

  # iOS Build
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Setup environment file
      run: |
        echo "ENVIRONMENT=production" > .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "FIREBASE_IOS_API_KEY=${{ secrets.FIREBASE_IOS_API_KEY }}" >> .env
        echo "ENABLE_ENCRYPTION=true" >> .env
        echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> .env
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Setup iOS certificates
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.IOS_P12_BASE64 }}" | base64 --decode > ios_certificate.p12
        echo "${{ secrets.IOS_MOBILEPROVISION_BASE64 }}" | base64 --decode > ios_profile.mobileprovision
        
        # Import certificate
        security create-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain
        security import ios_certificate.p12 -k build.keychain -P "${{ secrets.IOS_P12_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp ios_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        
    - name: Build iOS (Development)
      if: github.ref != 'refs/heads/main'
      run: flutter build ios --no-codesign
      
    - name: Build iOS (Release)
      if: github.ref == 'refs/heads/main'
      run: flutter build ios --release
      
    - name: Archive iOS App
      if: github.ref == 'refs/heads/main'
      run: |
        cd ios
        xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -destination 'generic/platform=iOS' -archivePath Runner.xcarchive archive
        xcodebuild -exportArchive -archivePath Runner.xcarchive -exportPath ../build/ios/ipa -exportOptionsPlist Runner/ExportOptions.plist
        
    - name: Upload iOS IPA
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: ios-ipa
        path: build/ios/ipa/*.ipa

  # Web Build
  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Setup environment file
      run: |
        echo "ENVIRONMENT=production" > .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "FIREBASE_WEB_API_KEY=${{ secrets.FIREBASE_WEB_API_KEY }}" >> .env
        echo "ENABLE_ENCRYPTION=false" >> .env
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Build Web
      run: flutter build web --release --web-renderer html
      
    - name: Upload Web Build
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: build/web/

  # Desktop Builds
  build-desktop:
    name: Build Desktop
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            build_cmd: flutter build linux --release
            artifact_path: build/linux/x64/release/bundle/
          - os: windows-latest
            platform: windows
            build_cmd: flutter build windows --release
            artifact_path: build/windows/x64/runner/Release/
          - os: macos-latest
            platform: macos
            build_cmd: flutter build macos --release
            artifact_path: build/macos/Build/Products/Release/
            
    runs-on: ${{ matrix.os }}
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Setup Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
        
    - name: Setup environment file
      run: |
        echo "ENVIRONMENT=production" > .env
        echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
        echo "ENABLE_ENCRYPTION=true" >> .env
        echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> .env
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Generate code
      run: dart run build_runner build --delete-conflicting-outputs
      
    - name: Enable desktop
      run: flutter config --enable-${{ matrix.platform }}-desktop
      
    - name: Build ${{ matrix.platform }}
      run: ${{ matrix.build_cmd }}
      
    - name: Create archive (Linux)
      if: matrix.platform == 'linux'
      run: |
        cd build/linux/x64/release/bundle/
        tar -czf ../finlytic-linux-x64.tar.gz *
        
    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        cd build/windows/x64/runner/Release/
        7z a ../finlytic-windows-x64.zip *
        
    - name: Create archive (macOS)
      if: matrix.platform == 'macos'
      run: |
        cd build/macos/Build/Products/Release/
        zip -r ../finlytic-macos-x64.zip finlytic.app
        
    - name: Upload ${{ matrix.platform }} build
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.platform }}-build
        path: |
          build/linux/x64/release/finlytic-linux-x64.tar.gz
          build/windows/x64/runner/finlytic-windows-x64.zip
          build/macos/Build/Products/finlytic-macos-x64.zip

  # Deployment
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-web]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download Web Build
      uses: actions/download-artifact@v3
      with:
        name: web-build
        path: web-build/
        
    - name: Deploy to Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'
        channelId: live
        
    # Add additional deployment steps for app stores here
    # - Deploy to Google Play Store
    # - Deploy to Apple App Store
    # - Deploy to Microsoft Store